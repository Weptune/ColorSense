# utils/emotion_grader.py

import cv2
import numpy as np

# Central grading map
EMOTION_GRADING = {
    "Happy": {
        "hue_shift": 5,
        "sat_mult": [1.05, 1.1, 1.2],
        "bright_mult": [1.05, 1.1, 1.2],
        "contrast_mult": [1.05, 1.1, 1.2],
    },
    "Sad": {
        "hue_shift": -5,
        "sat_mult": [0.95, 0.9, 0.85],
        "bright_mult": [0.95, 0.9, 0.85],
        "contrast_mult": [0.95, 0.9, 0.85],
    },
    "Angry": {
        "hue_shift": 10,
        "sat_mult": [1.1, 1.2, 1.3],
        "bright_mult": [1.0, 0.95, 0.9],
        "contrast_mult": [1.1, 1.2, 1.3],
    },
    "Calm": {
        "hue_shift": -10,
        "sat_mult": [0.9, 0.85, 0.8],
        "bright_mult": [1.05, 1.1, 1.15],
        "contrast_mult": [0.95, 0.9, 0.85],
    },
    # Add more as needed
}

def apply_emotion_grade(frame, emotion="Neutral", intensity=2):
    """
    Apply color grading to a frame based on emotion and intensity.
    :param frame: Input image (BGR)
    :param emotion: Emotion label as a string
    :param intensity: 1 (subtle), 2 (medium), 3 (strong)
    :return: Adjusted frame (BGR)
    """
    if emotion not in EMOTION_GRADING or intensity not in [1, 2, 3]:
        return frame  # No grading applied if emotion unknown

    settings = EMOTION_GRADING[emotion]
    intensity_idx = intensity - 1

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV).astype(np.float32)

    # Adjust hue
    hsv[..., 0] = (hsv[..., 0] + settings["hue_shift"]) % 180

    # Adjust saturation
    hsv[..., 1] *= settings["sat_mult"][intensity_idx]

    # Adjust brightness
    hsv[..., 2] *= settings["bright_mult"][intensity_idx]

    # Clip HSV
    hsv = np.clip(hsv, 0, 255).astype(np.uint8)

    # Convert back to BGR
    adjusted = cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)

    # Adjust contrast (post-HSV conversion)
    contrast_mult = settings["contrast_mult"][intensity_idx]
    adjusted = cv2.convertScaleAbs(adjusted, alpha=contrast_mult, beta=0)

    return adjusted
